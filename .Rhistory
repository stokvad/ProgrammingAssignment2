?'<<-'
m <- matrix(c(3,6,32,37), nrow = 2, ncol = 2, byrow = TRUE)
m
inv_m <- solve(m)
inv_m
m+m
m-m
m
2*m
3*m
m %*% m
m^2
m*m
t(m)
solve(m) %*% m == diag(nrow = nrow(m), ncol = ncol(m))
s <- solve(m) %*% m == diag(nrow = nrow(m), ncol = ncol(m))
all(s) == true
all(s) == TRUE
all(s)
library('MASS')
ginv(m)
library(MASS)
ginv(m)
## Put comments here that give an overall description of what your
## functions do
## This function gives access to the Matrix cache for faster computation
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
# Create setter functionality
set <- function(y) {
x <<- y
inv <<- NULL
}
# Getter functionality for variable x in this environment
get <- function() x
# Setter and getter for the solve function
setinv <- function(solve) inv <<- solve
getinv <- function() inv
# return the 'object' with set and get commands
list(set = set, get = get,
setinv = setinv, getinv = getinv)
}
## This function computes the inverse of a Matrix and uses a cache for
## faster computation
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# if a cache exists for this matrix retrieve it
inv <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(inv) # this line returns the value and ends the function
}
# else no cache exists - calc the inv value and cache it
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cachesolve(m)
cacheSolve(m)
makeCacheMatrix(m)
makeCacheMatrix(m, ...)
makeCacheMatrix(m)
m
m$get
m
solve(m)
makeCacheMatrix(m)
class(m())
class(m
)
d <- makeCacheMatrix(matrix(c(3,6,32,37), ncol=2, nrow=2))
d
d$get
cacheSolve(d)
## Put comments here that give an overall description of what your
## functions do
## This function gives access to the Matrix cache for faster computation
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
# Create setter functionality
set <- function(y) {
x <<- y
inv <<- NULL
}
# Getter functionality for variable x in this environment
get <- function() x
# Setter and getter for the solve function
setinv <- function(solve) inv <<- solve
getinv <- function() inv
# return the 'object' with set and get commands
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of a Matrix and uses a cache for
## faster computation
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# if a cache exists for this matrix retrieve it
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv) # this line returns the value and ends the function
}
# else no cache exists - calc the inv value and cache it
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(d)
cacheSolve(d)
cacheSolve(d)
cacheSolve(d)
